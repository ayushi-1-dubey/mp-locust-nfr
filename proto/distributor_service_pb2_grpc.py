# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import distributor_service_pb2 as distributor__service__pb2


class DistributorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateInventory = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/CreateInventory',
                request_serializer=distributor__service__pb2.CreateInventoryRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.CreateInventoryResponse.FromString,
                )
        self.GetLotDetails = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetLotDetails',
                request_serializer=distributor__service__pb2.GetLotDetailsRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.LotResponse.FromString,
                )
        self.GetAvailableLots = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetAvailableLots',
                request_serializer=distributor__service__pb2.GetAvailableLotsRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.AvailableLotsResponse.FromString,
                )
        self.UpdateInventoryQuantityUsingFKHLotId = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventoryQuantityUsingFKHLotId',
                request_serializer=distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdResponse.FromString,
                )
        self.UpdateInventorySoldQuantityUsingFKHLotId = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventorySoldQuantityUsingFKHLotId',
                request_serializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdResponse.FromString,
                )
        self.UpdateInventoryQuantityUsingExternalLotId = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventoryQuantityUsingExternalLotId',
                request_serializer=distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdResponse.FromString,
                )
        self.UpdateInventorySoldQuantityUsingExternalLotId = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventorySoldQuantityUsingExternalLotId',
                request_serializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdResponse.FromString,
                )
        self.GetDistributorApobToWarehouseIdMapping = channel.unary_unary(
                '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetDistributorApobToWarehouseIdMapping',
                request_serializer=distributor__service__pb2.GetDistributorApobToWarehouseIdMappingRequest.SerializeToString,
                response_deserializer=distributor__service__pb2.GetDistributorApobToWarehouseIdMappingResponse.FromString,
                )


class DistributorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateInventory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLotDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableLots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventoryQuantityUsingFKHLotId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventorySoldQuantityUsingFKHLotId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventoryQuantityUsingExternalLotId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventorySoldQuantityUsingExternalLotId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistributorApobToWarehouseIdMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateInventory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInventory,
                    request_deserializer=distributor__service__pb2.CreateInventoryRequest.FromString,
                    response_serializer=distributor__service__pb2.CreateInventoryResponse.SerializeToString,
            ),
            'GetLotDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLotDetails,
                    request_deserializer=distributor__service__pb2.GetLotDetailsRequest.FromString,
                    response_serializer=distributor__service__pb2.LotResponse.SerializeToString,
            ),
            'GetAvailableLots': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableLots,
                    request_deserializer=distributor__service__pb2.GetAvailableLotsRequest.FromString,
                    response_serializer=distributor__service__pb2.AvailableLotsResponse.SerializeToString,
            ),
            'UpdateInventoryQuantityUsingFKHLotId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventoryQuantityUsingFKHLotId,
                    request_deserializer=distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdRequest.FromString,
                    response_serializer=distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdResponse.SerializeToString,
            ),
            'UpdateInventorySoldQuantityUsingFKHLotId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventorySoldQuantityUsingFKHLotId,
                    request_deserializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdRequest.FromString,
                    response_serializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdResponse.SerializeToString,
            ),
            'UpdateInventoryQuantityUsingExternalLotId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventoryQuantityUsingExternalLotId,
                    request_deserializer=distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdRequest.FromString,
                    response_serializer=distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdResponse.SerializeToString,
            ),
            'UpdateInventorySoldQuantityUsingExternalLotId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventorySoldQuantityUsingExternalLotId,
                    request_deserializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdRequest.FromString,
                    response_serializer=distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdResponse.SerializeToString,
            ),
            'GetDistributorApobToWarehouseIdMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistributorApobToWarehouseIdMapping,
                    request_deserializer=distributor__service__pb2.GetDistributorApobToWarehouseIdMappingRequest.FromString,
                    response_serializer=distributor__service__pb2.GetDistributorApobToWarehouseIdMappingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DistributorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateInventory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/CreateInventory',
            distributor__service__pb2.CreateInventoryRequest.SerializeToString,
            distributor__service__pb2.CreateInventoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLotDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetLotDetails',
            distributor__service__pb2.GetLotDetailsRequest.SerializeToString,
            distributor__service__pb2.LotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableLots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetAvailableLots',
            distributor__service__pb2.GetAvailableLotsRequest.SerializeToString,
            distributor__service__pb2.AvailableLotsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventoryQuantityUsingFKHLotId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventoryQuantityUsingFKHLotId',
            distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdRequest.SerializeToString,
            distributor__service__pb2.UpdateInventoryQuantityUsingFKHLotIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventorySoldQuantityUsingFKHLotId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventorySoldQuantityUsingFKHLotId',
            distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdRequest.SerializeToString,
            distributor__service__pb2.UpdateInventorySoldQuantityUsingFKHLotIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventoryQuantityUsingExternalLotId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventoryQuantityUsingExternalLotId',
            distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdRequest.SerializeToString,
            distributor__service__pb2.UpdateInventoryQuantityUsingExternalLotIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventorySoldQuantityUsingExternalLotId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/UpdateInventorySoldQuantityUsingExternalLotId',
            distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdRequest.SerializeToString,
            distributor__service__pb2.UpdateInventorySoldQuantityUsingExternalLotIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistributorApobToWarehouseIdMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.flipkarthealthplus.marketplace.portalservice.distributorservice.DistributorService/GetDistributorApobToWarehouseIdMapping',
            distributor__service__pb2.GetDistributorApobToWarehouseIdMappingRequest.SerializeToString,
            distributor__service__pb2.GetDistributorApobToWarehouseIdMappingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
